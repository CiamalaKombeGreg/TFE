// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/**
 * ----------------------------------------------------- Type personnaliser -----------------------------------------------------
 */

/**
 * Role définit les rôles actuelle dans l'entreprise
 * - SUPERADMIN est le seul qui peut se donner des congé (tout les droits)
 * - RH peut donner des congé à ses supervisés
 * - Un RH doit demander au superadmin pour obtenir des congé
 */

enum Role {
  SUPERADMIN // Droits maximum, la plus haute instance dans l'entreprise
  RH // Ressource humaines
  DEV // Développeur
  STAGIAIRE
  COMPTABILITE
}

//-------------------------------------------------------------------------------//

/**
 * Voici les status possible pour un congé lorsqu'il est encodé
 * - Un seul status possible par absences
 * - Une demande est nécessaire pour annuler une absence accepter, néanmoins le superviseur peux annuler l'absence si ce dernier prévient le personnel touché
 */

enum Status {
  ACCEPTER
  REFUSER
  ANALYSE // En court d'analyse, sera soit ACCEPTER ou REFUSER
  ANNULER
}

/**
 * ----------------------------------------------------- Tables générals -----------------------------------------------------
 */

/**
 * Cette table indique chaque membre du personnel
 * - Un employé peux avoir plusieurs rôles
 * - Le total de congé donner peux être dépasser, mais un message d'avertissement devra être mis en place
 * - Un superviseur peux supervisé plusieurs personne
 * - Un membre peux être supervisé par plusieurs superviseurs
 */

model Personnel {
  prsId         String           @id @default(uuid())
  pseudo        String           @unique
  email         String           @unique
  role          Role[] // Rôle dans l'entreprise
  notifications String[] // Notifications garder en database sur l'application
  totalConge    AllowedHoliday[] @relation("allowedPersonnel") // Liste des congés restants par types
  supervisor    Supervision[]    @relation("superviseur") // Liste des gens qui supervise la personne
  supervise     Supervision[]    @relation("supervise") // Liste des gens que la personne supervise
  conges        Conge[]          @relation("personnel")
}

//-------------------------------------------------------------------------------//

/**
 * Cette table permet de structuré les absences possible
 * - Par défaut, une absence demander est en ANALYSE
 * - A voir, mais une pièce jointe peuvent être rajouter si le congé est EXCEPTIONNEL ou MALADIE (déclaration de congé)
 */

/**
 * REDUCE IT TO ONE-TO MANY, ONE PERSON WITH MANY ABSENCE BUT EACH ABSENCE HAVE ONE PERSON
 */

model Absences {
  absId       String   @id @default(uuid())
  title       String
  typeId      String
  absType     AbsType  @relation("type", fields: [typeId], references: [typeId])
  startDate   DateTime
  endDate     DateTime
  createAt    DateTime @default(now())
  updateAt    DateTime @updatedAt
  status      Status   @default(ANALYSE)
  commentaire String
  conges      Conge[]  @relation("absence")
}

//-------------------------------------------------------------------------------//

/**
 * La liste des type d'absences possible
 * - Les télétravails compte comme journée de travail, donc les chèques repas son attribué
 * - Les congés MALADIE & EXCEPTIONNEL sont illimités à condition d'introduire une pièce jointe et/ou preuve
 * - Les congés LEGAUX, EXTRA_LEGAUX, FERIE, SANSSOLDE & TELETRAVAIL doivent être obligatoirement accepté par un superviseur
 */

// LEGAUX - Congé légaux sont donnée par année, des jours de congés accorder aux personnel | Congé est payé
// EXTRA_LEGAUX - Congé accordé en suplément des congés légaux | Congé est payé
// TELETRAVAIL - Journée de télétrail qui sont accordées par semaine
// FERIE - Jours férié ayant été reporté, accordé chaque année
// SANSSOLDE - Congé pouvant être demander sans motif particulier
// MALADIE
// EXCEPTIONNEL

/**
 * ONLY HAD INDIVIDUAL TYPE AND INTEGRATE EVERY FERIE USING EXTERNAL API
 */

model AbsType {
  typeId           String           @id @default(uuid())
  label            String           @unique
  totalOnPersonnel AllowedHoliday[] @relation("allowedTypes")
  absences         Absences[]       @relation("type")
}

/**
 * ----------------------------------------------------- Tables intermédiaire -----------------------------------------------------
 */

/**
 * Table intermédiaire entre un personnel et un autre, relation unaire donc TABLE INTERMEDIAIRE
 */

model Supervision {
  superviseur   Personnel @relation("superviseur", fields: [superviseurId], references: [prsId])
  superviseurId String
  supervise     Personnel @relation("supervise", fields: [superviseId], references: [prsId])
  superviseId   String

  @@id([superviseId, superviseurId])
}

//-------------------------------------------------------------------------------//

/**
 * Table intermédiaire entre un personnel et un conge, relation many to many donc TABLE INTERMEDIAIRE
 */

model Conge {
  personnel   Personnel @relation("personnel", fields: [personnelId], references: [prsId])
  personnelId String
  absence     Absences  @relation("absence", fields: [absenceId], references: [absId])
  absenceId   String

  @@id([personnelId, absenceId])
}

//-------------------------------------------------------------------------------//

/**
 * Table intermédiaire entre un personnel et un conge, relartion many to many donc table INTERMEDIAIRE
 * - La valeur par défaut de jours restant est 365, ce cas est prit comme n'ayant pas de limite de jours
 */

model AllowedHoliday {
  personnel     Personnel @relation("allowedPersonnel", fields: [personnelId], references: [prsId])
  personnelId   String
  type          AbsType   @relation("allowedTypes", fields: [typeId], references: [typeId])
  typeId        String
  remainingDays Int?      @default(365)

  @@id([personnelId, typeId])
}
